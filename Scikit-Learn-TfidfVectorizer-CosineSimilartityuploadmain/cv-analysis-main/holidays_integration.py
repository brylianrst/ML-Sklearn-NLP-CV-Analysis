# -*- coding: utf-8 -*-
"""Holidays_Integration.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yf_mEo0s9_oSLD0Z5qx2N_-WCV88_AKD
"""

import requests
from datetime import datetime, date, timedelta
def fetch_holidays(country_code, year):
    return fetch_holidays_google_calendar(country_code, year)
def fetch_holidays_google_calendar(country_code, year):
    try:
        url = f"https://www.googleapis.com/calendar/v3/calendars/{country_code}%23holiday%40group.v.calendar.google.com/events"
        params = {
            'key': 'AIzaSyDW6WwGu11hUff4DzMYquLrWgKZoSJ2Z4I',
            'timeMin': f'{year}-01-01T00:00:00Z',
            'timeMax': f'{year}-12-31T23:59:59Z',
            'singleEvents': 'true',
            'orderBy': 'startTime'
        }
        response = requests.get(url, params=params)
        response.raise_for_status()
        if response.status_code == 200:
            holidays = response.json().get('items', [])
            formatted_holidays = []
            for holiday in holidays:
                start_date = holiday.get('start', {}).get('date')
                if not start_date:
                    start_date = holiday.get('start', {}).get('dateTime', '')[:10]
                summary = holiday.get('summary')
                if start_date and summary:
                    formatted_holidays.append({
                        'date': start_date,
                        'name': summary
                    })
            return formatted_holidays
        else:
            print(f"Failed to fetch holidays for {country_code}. Status code: {response.status_code}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"Error fetching holidays for {country_code}: {e}")
        return None
def is_weekend(date):
    return date.weekday() >= 5
def is_holiday(date, holidays):
    return any(datetime.strptime(holiday['date'], '%Y-%m-%d').date() == date for holiday in holidays)
def calculate_available_workdays(start_date, end_date, holidays):
    available_days = []
    current_date = start_date
    while current_date <= end_date:
        if not is_weekend(current_date) and not is_holiday(current_date, holidays):
            available_days.append(current_date)
        current_date += timedelta(days=1)
    return available_days
def get_employee_holidays(employee_location, year):
    location_to_country_code = {
        'UK': 'en.uk',
        'India': 'en.indian',
        'USA': 'en.usa',
        'Canada': 'en.canadian',
    }
    country_code = location_to_country_code.get(employee_location)
    if country_code is None:
        print(f"No country code mapping found for {employee_location}")
        return []
    holidays = fetch_holidays(country_code, year)
    if not holidays:
        print(f"No holidays found for {employee_location} ({country_code})")
    return holidays
def get_daily_availability(date, holidays):
    if is_weekend(date) or is_holiday(date, holidays):
        return 0
    return 7  # Assuming 7 hours of work per day
def calculate_project_duration_in_days(total_hours, start_date, holidays):
    total_hours_needed = total_hours
    hours_accumulated = 0
    days_counted = 0
    current_date = start_date
    while hours_accumulated < total_hours_needed:
        daily_hours = get_daily_availability(current_date, holidays)
        hours_accumulated += daily_hours
        days_counted += 1
        current_date += timedelta(days=1)
    return days_counted
def estimate_project_cost(required_days, daily_cost):
    total_cost = required_days * daily_cost
    return total_cost
def main():
    year = 2024
    employee_locations = ['UK', 'USA', 'India', 'Canada']
    start_date = date(year, 7, 1)
    daily_cost = 500  # Example daily cost
    total_project_hours = 1000  # Example total project hours
    for employee_location in employee_locations:
        print(f"\nCalculating for {employee_location}...")
        employee_holidays = get_employee_holidays(employee_location, year)
        if not employee_holidays:
            continue
        available_workdays = calculate_available_workdays(start_date, date(year, 12, 31), employee_holidays)
        required_days = calculate_project_duration_in_days(total_project_hours, start_date, employee_holidays)
        project_cost = estimate_project_cost(required_days, daily_cost)
        print(f"Available workdays for {employee_location}: {len(available_workdays)}")
        print(f"Total time required for a {total_project_hours}-hour project: {required_days} days")
        print(f"Estimated project cost: ${project_cost}")
if __name__ == "__main__":
    main()